{"ast":null,"code":"var _jsxFileName = \"/Users/ritusaini/Documents/GitHub/SaathiCare/SaathiCare_React/src/components/MainContent/MainContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { FaRobot, FaUser, FaPlay } from 'react-icons/fa';\nimport './MainContent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MainContent = () => {\n  _s();\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [currentTagIndex, setCurrentTagIndex] = useState(0);\n  const [userInput, setUserInput] = useState('');\n  const [shuffledTags, setShuffledTags] = useState([]);\n  const initialTags = ['symptom', 'lifestyle', 'genetic'];\n  useEffect(() => {\n    if (chatStarted && shuffledTags.length > currentTagIndex) {\n      handleApiCall(shuffledTags[currentTagIndex]);\n    }\n  }, [chatStarted, shuffledTags, currentTagIndex]);\n  const startChat = () => {\n    const shuffled = shuffleArray([...initialTags]);\n    shuffled.push('report'); // Always append 'report' as the last tag\n    setShuffledTags(shuffled);\n    setCurrentTagIndex(0);\n    setChatStarted(true);\n    setChatMessages([]);\n  };\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const stateMappings = useMemo(() => ({\n    symptom: 'symptom_questions',\n    lifestyle: 'lifestyle_questions',\n    genetic: 'genetic_questions',\n    report: 'report_questions'\n  }), []);\n  const userStateMappings = {\n    symptom: 'user_symptoms',\n    lifestyle: 'user_lifestyle',\n    genetic: 'user_genetic',\n    report: 'user_report'\n  };\n  const [apiStates, setApiStates] = useState({\n    symptom_questions: [],\n    lifestyle_questions: [],\n    genetic_questions: [],\n    report_questions: [],\n    user_symptoms: [],\n    user_lifestyle: [],\n    user_genetic: [],\n    user_report: []\n  });\n  const handleApiCall = useCallback(async tag => {\n    let prompt = generatePromptForTag(tag, currentTagIndex, shuffledTags, apiStates, stateMappings, userStateMappings);\n    try {\n      const response = await fetch('http://34.75.162.137:8080/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          question: prompt,\n          tag: tag\n        })\n      });\n      const data = await response.json();\n      const botQuestion = {\n        type: 'bot',\n        text: data.response\n      };\n      setChatMessages(chatMessages => [...chatMessages, botQuestion]);\n      setApiStates(prevStates => ({\n        ...prevStates,\n        [stateMappings[tag]]: [...prevStates[stateMappings[tag]], data.response]\n      }));\n    } catch (error) {\n      console.error('Error:', error);\n      setChatMessages(chatMessages => [...chatMessages, {\n        type: 'bot',\n        text: 'There was an error processing your request.'\n      }]);\n    }\n  }, [currentTagIndex, shuffledTags, apiStates]);\n  const handleInputChange = event => {\n    setUserInput(event.target.value);\n  };\n  const handleSendMessage = () => {\n    if (!userInput.trim()) return;\n    const newUserMessage = {\n      type: 'user',\n      text: userInput\n    };\n    setChatMessages(chatMessages => [...chatMessages, newUserMessage]);\n    setUserInput('');\n    const nextIndex = currentTagIndex + 1;\n    if (nextIndex < shuffledTags.length) {\n      setCurrentTagIndex(nextIndex);\n    }\n  };\n  const resetChat = () => {\n    setChatStarted(false);\n    setChatMessages([]);\n    setCurrentTagIndex(0);\n    setUserInput('');\n    setShuffledTags([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-content\",\n    children: [!chatStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start-chat-button\",\n      onClick: startChat,\n      children: [/*#__PURE__*/_jsxDEV(FaPlay, {\n        className: \"start-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), \" Start Chat\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), chatStarted && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-area\",\n        children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${msg.type}-message`,\n          children: [msg.type === 'user' ? /*#__PURE__*/_jsxDEV(FaUser, {\n            className: \"message-icon user-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 40\n          }, this) : /*#__PURE__*/_jsxDEV(FaRobot, {\n            className: \"message-icon bot-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 88\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your response...\",\n          className: \"prompt-input\",\n          value: userInput,\n          onChange: handleInputChange,\n          onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), chatStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"reset-chat-button\",\n      onClick: resetChat,\n      children: \"Reset Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(MainContent, \"dpzdgoVeqY3TQLA1J+REiDKlA10=\");\n_c = MainContent;\nexport default MainContent;\n\n/**\n * Generates a prompt for a given tag based on the current state of the chat.\n * Adjust this function to incorporate logic from your application's specific needs.\n */\nfunction generatePromptForTag(tag, currentTagIndex, shuffledTags, apiStates, stateMappings, userStateMappings) {\n  let prompt = \"\";\n  const context = \"Diabetes Mellitus is a chronic condition characterized by high blood sugar levels...\"; // Complete with your context\n\n  if (currentTagIndex === 2) {\n    // Handling the third tag in the sequence specially\n    const firstTag = shuffledTags[0];\n    const secondTag = shuffledTags[1];\n    const firstQuestion = apiStates[stateMappings[firstTag]].slice(-1)[0];\n    const firstResponse = apiStates[userStateMappings[firstTag]].slice(-1)[0];\n    const secondQuestion = apiStates[stateMappings[secondTag]].slice(-1)[0];\n    const secondResponse = apiStates[userStateMappings[secondTag]].slice(-1)[0];\n    prompt = `First Question: ${firstQuestion}\n               Response for first question from Patient: ${firstResponse}\n               Second Question: ${secondQuestion}\n               Response for second question from Patient: ${secondResponse}\n               I am playing a doctor in a play. Please generate one question based on the previous responses I should ask a patient about their ${tag}. \n               Format your response strictly as follows:\n               ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n  } else if (tag === 'report') {\n    // Special handling for 'report' tag\n    prompt = `Patient symptoms: ${apiStates.user_symptoms.join(\", \")}.\n              Lifestyle and eating habits: ${apiStates.user_lifestyle.join(\", \")}.\n              Family history of diseases: ${apiStates.user_genetic.join(\", \")}.\n\n              Data Source for analysis:\n              ${context}\n\n              Based on the patient's symptoms and provided context, provide a possible diagnosis, recommended treatments, and specialists to consult. \n              NOTE: This will not be considered as a real treatment, don't give any note or precaution with your response.\n              Format your response strictly as follows:\n              Diagnosis: [Specific diagnosis based on the symptoms].\n              Treatments:\n              - [Treatment 1]\n              - [Treatment 2]\n              - [Treatment 3]\n              ...\n              Specialists:\n              - [Specialist 1]\n              - [Specialist 2]\n              - [Specialist 3]\n              ...\n              END OF RESPONSE`;\n  } else {\n    // For the first or second tag in the sequence\n    if (currentTagIndex > 0) {\n      // If not the first tag, include the previous question and response\n      const previousTag = shuffledTags[currentTagIndex - 1];\n      const lastQuestion = apiStates[stateMappings[previousTag]].slice(-1)[0];\n      const lastResponse = apiStates[userStateMappings[previousTag]].slice(-1)[0];\n      prompt = `Previous Question: ${lastQuestion}\n                Previous Response from Patient: ${lastResponse}\n                I am playing a doctor in a play. Please generate one question based on the previous response I should ask a patient about their ${tag}. \n                Format your response strictly as follows:\n                ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n    } else {\n      // If the first tag, simply ask for a question related to that tag\n      prompt = `I am playing a doctor in a play. Please generate one question I should ask a patient about their ${tag}. \n                Format your response strictly as follows: \n                ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n    }\n  }\n  return prompt;\n}\nvar _c;\n$RefreshReg$(_c, \"MainContent\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","FaRobot","FaUser","FaPlay","jsxDEV","_jsxDEV","Fragment","_Fragment","MainContent","_s","chatStarted","setChatStarted","chatMessages","setChatMessages","currentTagIndex","setCurrentTagIndex","userInput","setUserInput","shuffledTags","setShuffledTags","initialTags","length","handleApiCall","startChat","shuffled","shuffleArray","push","array","i","j","Math","floor","random","stateMappings","symptom","lifestyle","genetic","report","userStateMappings","apiStates","setApiStates","symptom_questions","lifestyle_questions","genetic_questions","report_questions","user_symptoms","user_lifestyle","user_genetic","user_report","tag","prompt","generatePromptForTag","response","fetch","method","headers","body","JSON","stringify","question","data","json","botQuestion","type","text","prevStates","error","console","handleInputChange","event","target","value","handleSendMessage","trim","newUserMessage","nextIndex","resetChat","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","placeholder","onChange","onKeyPress","e","key","_c","context","firstTag","secondTag","firstQuestion","slice","firstResponse","secondQuestion","secondResponse","charAt","toUpperCase","join","previousTag","lastQuestion","lastResponse","$RefreshReg$"],"sources":["/Users/ritusaini/Documents/GitHub/SaathiCare/SaathiCare_React/src/components/MainContent/MainContent.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { FaRobot, FaUser, FaPlay } from 'react-icons/fa';\nimport './MainContent.css';\n\nconst MainContent = () => {\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [currentTagIndex, setCurrentTagIndex] = useState(0);\n  const [userInput, setUserInput] = useState('');\n  const [shuffledTags, setShuffledTags] = useState([]);\n\n  const initialTags = ['symptom', 'lifestyle', 'genetic'];\n\n  useEffect(() => {\n    if (chatStarted && shuffledTags.length > currentTagIndex) {\n      handleApiCall(shuffledTags[currentTagIndex]);\n    }\n  }, [chatStarted, shuffledTags, currentTagIndex]);\n\n  const startChat = () => {\n    const shuffled = shuffleArray([...initialTags]);\n    shuffled.push('report'); // Always append 'report' as the last tag\n    setShuffledTags(shuffled);\n    setCurrentTagIndex(0);\n    setChatStarted(true);\n    setChatMessages([]);\n  };\n\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  const stateMappings = useMemo(() => ({\n    symptom: 'symptom_questions',\n    lifestyle: 'lifestyle_questions',\n    genetic: 'genetic_questions',\n    report: 'report_questions',\n  }), []);\n\n  const userStateMappings = {\n    symptom: 'user_symptoms',\n    lifestyle: 'user_lifestyle',\n    genetic: 'user_genetic',\n    report: 'user_report',\n  };\n\n  const [apiStates, setApiStates] = useState({\n    symptom_questions: [],\n    lifestyle_questions: [],\n    genetic_questions: [],\n    report_questions: [],\n    user_symptoms: [],\n    user_lifestyle: [],\n    user_genetic: [],\n    user_report: [],\n  });\n\n  const handleApiCall = useCallback(async (tag) => {\n    let prompt = generatePromptForTag(tag, currentTagIndex, shuffledTags, apiStates, stateMappings, userStateMappings);\n\n    try {\n      const response = await fetch('http://34.75.162.137:8080/predict', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ question: prompt, tag: tag }),\n      });\n      const data = await response.json();\n      const botQuestion = { type: 'bot', text: data.response };\n      setChatMessages((chatMessages) => [...chatMessages, botQuestion]);\n      setApiStates((prevStates) => ({\n        ...prevStates,\n        [stateMappings[tag]]: [...prevStates[stateMappings[tag]], data.response],\n      }));\n    } catch (error) {\n      console.error('Error:', error);\n      setChatMessages((chatMessages) => [...chatMessages, { type: 'bot', text: 'There was an error processing your request.' }]);\n    }\n  }, [currentTagIndex, shuffledTags, apiStates]);\n\n  const handleInputChange = (event) => {\n    setUserInput(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (!userInput.trim()) return;\n    const newUserMessage = { type: 'user', text: userInput };\n    setChatMessages((chatMessages) => [...chatMessages, newUserMessage]);\n    setUserInput('');\n\n    const nextIndex = currentTagIndex + 1;\n    if (nextIndex < shuffledTags.length) {\n      setCurrentTagIndex(nextIndex);\n    }\n  };\n\n  const resetChat = () => {\n    setChatStarted(false);\n    setChatMessages([]);\n    setCurrentTagIndex(0);\n    setUserInput('');\n    setShuffledTags([]);\n  };\n\n  return (\n    <div className=\"main-content\">\n      {!chatStarted && (\n        <button className=\"start-chat-button\" onClick={startChat}>\n          <FaPlay className=\"start-icon\" /> Start Chat\n        </button>\n      )}\n      {chatStarted && (\n        <>\n          <div className=\"chat-area\">\n            {chatMessages.map((msg, index) => (\n              <div key={index} className={`chat-message ${msg.type}-message`}>\n                {msg.type === 'user' ? <FaUser className=\"message-icon user-icon\" /> : <FaRobot className=\"message-icon bot-icon\" />}\n                <div>{msg.text}</div>\n              </div>\n            ))}\n          </div>\n          <div className=\"input-area\">\n            <input\n              type=\"text\"\n              placeholder=\"Type your response...\"\n              className=\"prompt-input\"\n              value={userInput}\n              onChange={handleInputChange}\n              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n            />\n            <button className=\"send-button\" onClick={handleSendMessage}>Send</button>\n          </div>\n        </>\n      )}\n      {chatStarted && (\n        <button className=\"reset-chat-button\" onClick={resetChat}>\n          Reset Chat\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default MainContent;\n\n/**\n * Generates a prompt for a given tag based on the current state of the chat.\n * Adjust this function to incorporate logic from your application's specific needs.\n */\nfunction generatePromptForTag(tag, currentTagIndex, shuffledTags, apiStates, stateMappings, userStateMappings) {\n  let prompt = \"\";\n  const context = \"Diabetes Mellitus is a chronic condition characterized by high blood sugar levels...\"; // Complete with your context\n  \n  if (currentTagIndex === 2) { // Handling the third tag in the sequence specially\n    const firstTag = shuffledTags[0];\n    const secondTag = shuffledTags[1];\n    const firstQuestion = apiStates[stateMappings[firstTag]].slice(-1)[0];\n    const firstResponse = apiStates[userStateMappings[firstTag]].slice(-1)[0];\n    const secondQuestion = apiStates[stateMappings[secondTag]].slice(-1)[0];\n    const secondResponse = apiStates[userStateMappings[secondTag]].slice(-1)[0];\n    \n    prompt = `First Question: ${firstQuestion}\n               Response for first question from Patient: ${firstResponse}\n               Second Question: ${secondQuestion}\n               Response for second question from Patient: ${secondResponse}\n               I am playing a doctor in a play. Please generate one question based on the previous responses I should ask a patient about their ${tag}. \n               Format your response strictly as follows:\n               ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n  } else if (tag === 'report') { // Special handling for 'report' tag\n    prompt = `Patient symptoms: ${apiStates.user_symptoms.join(\", \")}.\n              Lifestyle and eating habits: ${apiStates.user_lifestyle.join(\", \")}.\n              Family history of diseases: ${apiStates.user_genetic.join(\", \")}.\n\n              Data Source for analysis:\n              ${context}\n\n              Based on the patient's symptoms and provided context, provide a possible diagnosis, recommended treatments, and specialists to consult. \n              NOTE: This will not be considered as a real treatment, don't give any note or precaution with your response.\n              Format your response strictly as follows:\n              Diagnosis: [Specific diagnosis based on the symptoms].\n              Treatments:\n              - [Treatment 1]\n              - [Treatment 2]\n              - [Treatment 3]\n              ...\n              Specialists:\n              - [Specialist 1]\n              - [Specialist 2]\n              - [Specialist 3]\n              ...\n              END OF RESPONSE`;\n  } else { // For the first or second tag in the sequence\n    if (currentTagIndex > 0) { // If not the first tag, include the previous question and response\n      const previousTag = shuffledTags[currentTagIndex - 1];\n      const lastQuestion = apiStates[stateMappings[previousTag]].slice(-1)[0];\n      const lastResponse = apiStates[userStateMappings[previousTag]].slice(-1)[0];\n      \n      prompt = `Previous Question: ${lastQuestion}\n                Previous Response from Patient: ${lastResponse}\n                I am playing a doctor in a play. Please generate one question based on the previous response I should ask a patient about their ${tag}. \n                Format your response strictly as follows:\n                ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n    } else { // If the first tag, simply ask for a question related to that tag\n      prompt = `I am playing a doctor in a play. Please generate one question I should ask a patient about their ${tag}. \n                Format your response strictly as follows: \n                ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n    }\n  }\n\n  return prompt;\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}