{"ast":null,"code":"var _jsxFileName = \"/Users/ritusaini/Documents/GitHub/SaathiCare/SaathiCare_React/src/components/MainContent/MainContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { FaRobot, FaUser, FaPlay } from 'react-icons/fa';\nimport './MainContent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MainContent = () => {\n  _s();\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [currentStep, setCurrentStep] = useState('');\n  const [userInput, setUserInput] = useState('');\n  const [shuffledTags, setShuffledTags] = useState([]);\n  const initialTags = ['symptom', 'lifestyle', 'genetic'];\n  const startChat = () => {\n    const shuffled = shuffleArray([...initialTags]);\n    shuffled.push('report');\n    setShuffledTags(shuffled);\n    setChatStarted(true);\n  };\n  const stateMappings = useMemo(() => ({\n    symptom: 'symptom_questions',\n    lifestyle: 'lifestyle_questions',\n    genetic: 'genetic_questions',\n    report: 'report_questions'\n  }), []);\n  const userStateMappings = {\n    symptom: 'user_symptoms',\n    lifestyle: 'user_lifestyle',\n    genetic: 'user_genetic',\n    report: 'user_report'\n  };\n  const [apiStates, setApiStates] = useState({\n    symptom_questions: [],\n    lifestyle_questions: [],\n    genetic_questions: [],\n    report_questions: [],\n    user_symptoms: [],\n    user_lifestyle: [],\n    user_genetic: [],\n    user_report: []\n  });\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const handleApiCall = useCallback(async tag => {\n    setCurrentStep(tag);\n\n    // Initialize variables for dynamic prompt construction\n    let previousQuestionsAnswersText = '';\n    const previousIndex = shuffledTags.indexOf(tag) - 1;\n\n    // If there's a previous tag, construct the context from it\n    if (previousIndex >= 0) {\n      const previousTag = shuffledTags[previousIndex];\n      const lastQuestion = apiStates[stateMappings[previousTag]].slice(-1)[0] || 'No previous question';\n      const lastResponse = apiStates[userStateMappings[previousTag]].slice(-1)[0] || 'No previous response';\n      previousQuestionsAnswersText = `Previous Question: ${lastQuestion}\n                                         Previous Response from Patient: ${lastResponse}`;\n    }\n\n    // Dynamically construct the prompt based on the tag and available context\n    let prompt = '';\n    switch (tag) {\n      case \"symptom\":\n      case \"lifestyle\":\n      case \"genetic\":\n        if (previousQuestionsAnswersText) {\n          prompt = `${previousQuestionsAnswersText}\n                          I am playing a doctor in a play. Please generate one question based on the previous response I should ask a patient about their ${tag}. \n                          Format your response strictly as follows:\n                          ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n        } else {\n          // If no previous Q&A (tag is first in sequence), use a generic prompt\n          prompt = `I am playing a doctor in a play. Please generate one question I should ask a patient about their ${tag}. \n                          Format your response strictly as follows: \n                          ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n        }\n        break;\n      case \"report\":\n        // The \"report\" case might always be last and assume all previous data is available\n        prompt = `Patient symptoms: ${apiStates.user_symptoms.join(\", \")}.\n                      Lifestyle and eating habits: ${apiStates.user_lifestyle.join(\", \")}.\n                      Family history of diseases: ${apiStates.user_genetic.join(\", \")}.\n\n                      Data Source for analysis:\n                      [Insert detailed context here]\n\n                      Based on the patient's symptoms and provided context, provide a possible diagnosis, recommended treatments, and specialists to consult. \n                      NOTE: This will not be considered as a real treatment, don't give any note or precaution with your response.\n                      Format your response strictly as follows:\n                      Diagnosis: [Specific diagnosis based on the symptoms].\n                      Treatments:\n                      - [Treatment 1]\n                      - [Treatment 2]\n                      - [Treatment 3]\n                      ...\n                      Specialists:\n                      - [Specialist 1]\n                      - [Specialist 2]\n                      - [Specialist 3]\n                      ...\n                      END OF RESPONSE`;\n        break;\n    }\n    try {\n      const response = await fetch('http://34.75.162.137:8080/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"question\": prompt,\n          \"tag\": tag\n        })\n      });\n      const data = await response.json();\n      const botQuestion = {\n        type: 'bot',\n        text: data.response\n      };\n      setChatMessages(chatMessages => [...chatMessages, botQuestion]);\n      setApiStates(prev => ({\n        ...prev,\n        [stateMappings[tag]]: [...prev[stateMappings[tag]], botQuestion.text]\n      }));\n    } catch (error) {\n      console.error('Error:', error);\n      const errorMessage = {\n        type: 'bot',\n        text: 'There was an error processing your request.'\n      };\n      setChatMessages(chatMessages => [...chatMessages, errorMessage]);\n    }\n  }, [apiStates, shuffledTags, setCurrentStep, setChatMessages, setApiStates, stateMappings, userStateMappings]);\n  const handleInputChange = event => {\n    setUserInput(event.target.value);\n  };\n  const handleSendMessage = () => {\n    if (!userInput.trim()) return;\n    const newUserMessage = {\n      type: 'user',\n      text: userInput\n    };\n    setChatMessages(chatMessages => [...chatMessages, newUserMessage]);\n    setApiStates(prev => ({\n      ...prev,\n      [userStateMappings[currentStep]]: [...prev[userStateMappings[currentStep]], userInput]\n    }));\n    setUserInput('');\n    const nextIndex = shuffledTags.indexOf(currentStep) + 1;\n    if (nextIndex < shuffledTags.length) {\n      handleApiCall(shuffledTags[nextIndex]);\n    }\n  };\n  useEffect(() => {\n    if (chatStarted && shuffledTags.length) {\n      handleApiCall(shuffledTags[0]);\n    }\n  }, [chatStarted, shuffledTags, handleApiCall]);\n  const resetChat = () => {\n    setChatStarted(false);\n    setChatMessages([]);\n    setCurrentStep('');\n    setUserInput('');\n    setApiStates({\n      symptom_questions: [],\n      lifestyle_questions: [],\n      genetic_questions: [],\n      report_questions: [],\n      user_symptoms: [],\n      user_lifestyle: [],\n      user_genetic: [],\n      user_report: []\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-content\",\n    children: [!chatStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"start-chat-button\",\n      onClick: startChat,\n      children: [/*#__PURE__*/_jsxDEV(FaPlay, {\n        className: \"start-icon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this), \" Start Chat\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }, this), chatStarted && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-area\",\n        children: chatMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `chat-message ${msg.type}-message`,\n          children: [msg.type === 'user' ? /*#__PURE__*/_jsxDEV(FaUser, {\n            className: \"message-icon user-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 40\n          }, this) : /*#__PURE__*/_jsxDEV(FaRobot, {\n            className: \"message-icon bot-icon\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 88\n          }, this), msg.type === 'bot' && msg.text.includes('\\n') ? msg.text.split('\\n').map((line, idx) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [line, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 23\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 21\n          }, this)) : msg.text]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter your response\",\n          className: \"prompt-input\",\n          value: userInput,\n          onChange: handleInputChange,\n          onKeyPress: e => e.key === 'Enter' && handleSendMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSendMessage,\n          children: \"\\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), chatStarted && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"reset-chat-button\",\n      onClick: resetChat,\n      children: \"Reset Chat\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n_s(MainContent, \"0kXockWvc2s2qRF/vDYWR5g4A8U=\");\n_c = MainContent;\nexport default MainContent;\nvar _c;\n$RefreshReg$(_c, \"MainContent\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","FaRobot","FaUser","FaPlay","jsxDEV","_jsxDEV","Fragment","_Fragment","MainContent","_s","chatStarted","setChatStarted","chatMessages","setChatMessages","currentStep","setCurrentStep","userInput","setUserInput","shuffledTags","setShuffledTags","initialTags","startChat","shuffled","shuffleArray","push","stateMappings","symptom","lifestyle","genetic","report","userStateMappings","apiStates","setApiStates","symptom_questions","lifestyle_questions","genetic_questions","report_questions","user_symptoms","user_lifestyle","user_genetic","user_report","array","i","length","j","Math","floor","random","handleApiCall","tag","previousQuestionsAnswersText","previousIndex","indexOf","previousTag","lastQuestion","slice","lastResponse","prompt","charAt","toUpperCase","join","response","fetch","method","headers","body","JSON","stringify","data","json","botQuestion","type","text","prev","error","console","errorMessage","handleInputChange","event","target","value","handleSendMessage","trim","newUserMessage","nextIndex","resetChat","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","includes","split","line","idx","placeholder","onChange","onKeyPress","e","key","_c","$RefreshReg$"],"sources":["/Users/ritusaini/Documents/GitHub/SaathiCare/SaathiCare_React/src/components/MainContent/MainContent.js"],"sourcesContent":["import React, { useState, useEffect, useCallback ,useMemo} from 'react';\nimport { FaRobot, FaUser, FaPlay } from 'react-icons/fa';\nimport './MainContent.css';\n\nconst MainContent = () => {\n  const [chatStarted, setChatStarted] = useState(false);\n  const [chatMessages, setChatMessages] = useState([]);\n  const [currentStep, setCurrentStep] = useState('');\n  const [userInput, setUserInput] = useState('');\n  const [shuffledTags, setShuffledTags] = useState([]);\n\n  const initialTags = ['symptom', 'lifestyle', 'genetic'];\n\n  const startChat = () => {\n    const shuffled = shuffleArray([...initialTags]);\n    shuffled.push('report');\n    setShuffledTags(shuffled);\n    setChatStarted(true);\n  };\n\n  const stateMappings = useMemo(() => ({\n    symptom: 'symptom_questions',\n    lifestyle: 'lifestyle_questions',\n    genetic: 'genetic_questions',\n    report: 'report_questions',\n  }), []);\n\n  const userStateMappings = {\n    symptom: 'user_symptoms',\n    lifestyle: 'user_lifestyle',\n    genetic: 'user_genetic',\n    report: 'user_report',\n  };\n\n  const [apiStates, setApiStates] = useState({\n    symptom_questions: [],\n    lifestyle_questions: [],\n    genetic_questions: [],\n    report_questions: [],\n    user_symptoms: [],\n    user_lifestyle: [],\n    user_genetic: [],\n    user_report: [],\n  });\n\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]]; \n    }\n    return array;\n  };  \n\n  const handleApiCall = useCallback(async (tag) => {\n    setCurrentStep(tag);\n\n    // Initialize variables for dynamic prompt construction\n    let previousQuestionsAnswersText = '';\n    const previousIndex = shuffledTags.indexOf(tag) - 1;\n\n    // If there's a previous tag, construct the context from it\n    if (previousIndex >= 0) {\n        const previousTag = shuffledTags[previousIndex];\n        const lastQuestion = apiStates[stateMappings[previousTag]].slice(-1)[0] || 'No previous question';\n        const lastResponse = apiStates[userStateMappings[previousTag]].slice(-1)[0] || 'No previous response';\n\n        previousQuestionsAnswersText = `Previous Question: ${lastQuestion}\n                                         Previous Response from Patient: ${lastResponse}`;\n    }\n\n    // Dynamically construct the prompt based on the tag and available context\n    let prompt = '';\n    switch (tag) {\n        case \"symptom\":\n        case \"lifestyle\":\n        case \"genetic\":\n            if (previousQuestionsAnswersText) {\n                prompt = `${previousQuestionsAnswersText}\n                          I am playing a doctor in a play. Please generate one question based on the previous response I should ask a patient about their ${tag}. \n                          Format your response strictly as follows:\n                          ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n            } else {\n                // If no previous Q&A (tag is first in sequence), use a generic prompt\n                prompt = `I am playing a doctor in a play. Please generate one question I should ask a patient about their ${tag}. \n                          Format your response strictly as follows: \n                          ${tag.charAt(0).toUpperCase() + tag.slice(1)}: [A question related to the ${tag} they are having].`;\n            }\n            break;\n        case \"report\":\n            // The \"report\" case might always be last and assume all previous data is available\n            prompt = `Patient symptoms: ${apiStates.user_symptoms.join(\", \")}.\n                      Lifestyle and eating habits: ${apiStates.user_lifestyle.join(\", \")}.\n                      Family history of diseases: ${apiStates.user_genetic.join(\", \")}.\n\n                      Data Source for analysis:\n                      [Insert detailed context here]\n\n                      Based on the patient's symptoms and provided context, provide a possible diagnosis, recommended treatments, and specialists to consult. \n                      NOTE: This will not be considered as a real treatment, don't give any note or precaution with your response.\n                      Format your response strictly as follows:\n                      Diagnosis: [Specific diagnosis based on the symptoms].\n                      Treatments:\n                      - [Treatment 1]\n                      - [Treatment 2]\n                      - [Treatment 3]\n                      ...\n                      Specialists:\n                      - [Specialist 1]\n                      - [Specialist 2]\n                      - [Specialist 3]\n                      ...\n                      END OF RESPONSE`;\n            break;\n    }\n\n    try {\n        const response = await fetch('http://34.75.162.137:8080/predict', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \"question\": prompt, \"tag\": tag }),\n        });\n        const data = await response.json();\n        const botQuestion = { type: 'bot', text: data.response };\n        setChatMessages(chatMessages => [...chatMessages, botQuestion]);\n        setApiStates(prev => ({\n            ...prev,\n            [stateMappings[tag]]: [...prev[stateMappings[tag]], botQuestion.text],\n        }));\n    } catch (error) {\n        console.error('Error:', error);\n        const errorMessage = { type: 'bot', text: 'There was an error processing your request.' };\n        setChatMessages(chatMessages => [...chatMessages, errorMessage]);\n    }\n}, [apiStates, shuffledTags, setCurrentStep, setChatMessages, setApiStates, stateMappings, userStateMappings]);\n\n  const handleInputChange = (event) => {\n    setUserInput(event.target.value);\n  };\n\n  const handleSendMessage = () => {\n    if (!userInput.trim()) return;\n    const newUserMessage = { type: 'user', text: userInput };\n    setChatMessages((chatMessages) => [...chatMessages, newUserMessage]);\n    setApiStates((prev) => ({\n      ...prev,\n      [userStateMappings[currentStep]]: [...prev[userStateMappings[currentStep]], userInput],\n    }));\n    setUserInput('');\n\n    const nextIndex = shuffledTags.indexOf(currentStep) + 1;\n    if (nextIndex < shuffledTags.length) {\n      handleApiCall(shuffledTags[nextIndex]);\n    }\n  };\n\n\n  useEffect(() => {\n    if (chatStarted && shuffledTags.length) {\n      handleApiCall(shuffledTags[0]);\n    }\n  }, [chatStarted, shuffledTags, handleApiCall]);\n\n  const resetChat = () => {\n    setChatStarted(false);\n    setChatMessages([]);\n    setCurrentStep('');\n    setUserInput('');\n    setApiStates({\n      symptom_questions: [],\n      lifestyle_questions: [],\n      genetic_questions: [],\n      report_questions: [],\n      user_symptoms: [],\n      user_lifestyle: [],\n      user_genetic: [],\n      user_report: [],\n    });\n  };\n\n  return (\n    <div className=\"main-content\">\n      {!chatStarted && (\n        <button className=\"start-chat-button\" onClick={startChat}>\n          <FaPlay className=\"start-icon\" /> Start Chat\n        </button>\n      )}\n      {chatStarted && (\n        <>\n          <div className=\"chat-area\">\n            {chatMessages.map((msg, index) => (\n              <div key={index} className={`chat-message ${msg.type}-message`}>\n                {msg.type === 'user' ? <FaUser className=\"message-icon user-icon\" /> : <FaRobot className=\"message-icon bot-icon\" />}\n                {msg.type === 'bot' && msg.text.includes('\\n') ? (\n                  msg.text.split('\\n').map((line, idx) => (\n                    <React.Fragment key={idx}>\n                      {line}\n                      <br />\n                    </React.Fragment>\n                  ))\n                ) : (\n                  msg.text\n                )}\n              </div>\n            ))}\n          </div>\n          <div className=\"input-area\">\n            <input\n              type=\"text\"\n              placeholder=\"Enter your response\"\n              className=\"prompt-input\"\n              value={userInput}\n              onChange={handleInputChange}\n              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n            />\n            <button className=\"send-button\" onClick={handleSendMessage}>→</button>\n          </div>\n        </>\n      )}\n      {chatStarted && (\n        <button className=\"reset-chat-button\" onClick={resetChat}>\n          Reset Chat\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default MainContent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}